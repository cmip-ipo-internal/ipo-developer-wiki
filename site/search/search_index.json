{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Welcome to Technical Documentation Wiki</p> <p>Documentation in progress</p> <p>The contents of the pages are currently in development, and many aspects still in flux. </p>"},{"location":"#contents","title":"Contents","text":"<p>The contents of this documentation is accessable using the menu on the left. Certain pages may be confidetial and therefore require password credentials to log-in. To get access to these, contact  cmipipo@esa.int . </p>"},{"location":"#useful-links","title":"Useful Links","text":"<p>There are number of links that may infulence your workflow. Many of these can be found on the  CMIP-IPO website .</p>"},{"location":"Airtable/prefilled_form/","title":"Create a prefilled form","text":"<p>As part of an airtable URL we are able to use query parameters to prefill certain values. </p>"},{"location":"Airtable/prefilled_form/#how-this-works","title":"How this works","text":"<p>We take our form url and provide a series of additional query parameters following the <code>?</code>. </p> <p>Here for example if we wanted to fill the <code>Name</code> field, we might add:  <pre><code>prefill_Name=Bob\n</code></pre></p>"},{"location":"Airtable/prefilled_form/#script","title":"Script","text":"<pre><code>'''\nAuthor and Maintainer contact \n  daniel.ellis (at) ext.esa.int\n'''\n\ndef generate_airtable_form_url(base_id, table_name, fields):\n    \"\"\"\n    Generates a pre-filled Airtable form URL with the given base ID, table name, and pre-fill fields.\n\n    Args:\n        base_id (str): The unique identifier of the Airtable base.\n        table_name (str): The name of the Airtable table.\n        fields (dict): A dictionary containing pre-fill field names as keys and corresponding values.\n\n    Returns:\n        str: The pre-filled Airtable form URL.\n\n    Example:\n        &gt;&gt;&gt; base_id = 'xxxxxxxxxxx'\n        &gt;&gt;&gt; table_name = 'yyyyyyyyyy'\n        &gt;&gt;&gt; fields = {\n        ...     'Name': 'York',\n        ...     'ROR': 'https://ror.org/04m01e293',\n        ...     'Assignee': 'Dan'\n        ... }\n        &gt;&gt;&gt; generate_airtable_form_url(base_id, table_name, fields)\n        'https://airtable.com/appaZflpqbFjA6pwV/shrNALXGlKZAk76iD?prefill_Name=York&amp;prefill_ROR=https://ror.org/04m01e293&amp;prefill_Assignee=dan'\n    \"\"\"\n    base_url = f'https://airtable.com/{base_id}/{table_name}'\n    # Construct the URL parameters for pre-filling the form fields\n    params = \"&amp;\".join([f'prefill_{key}={value}' for key, value in fields.items()])\n    airtable_form_url = f'{base_url}?{params}'\n    return airtable_form_url\n\n# Example usage\nif __name__ == \"__main__\":\n    # Replace the following values with your actual base ID, table name, and pre-fill fields\n\n    #  table / form information\n    base_id = 'xxxxxxxxxxx'\n    table_name = 'yyyyyyyyyy'\n\n    #  A dictionary containing the field name -&gt; value  of those which we want to prefill. \n    #  an example is given below\n    fields = {\n        'Name': 'York',\n        'ROR': 'https://ror.org/04m01e293',\n        'Assignee': 'Dan'\n    }\n\n    # Generate the pre-filled Airtable form URL\n\n    airtable_form_url = generate_airtable_form_url(base_id, table_name, fields)\n\n    print(f'Pre-filled Airtable form URL: {airtable_form_url}')\n</code></pre>"},{"location":"Airtable/script_fetchapi/","title":"Using the fetchAPI (currency converter)","text":"<p>Airtable is able to run scripts periodically or on a variety of triggers. In this case we write a script that checks the conversion rate between two currencies and updates a column of our table. </p> <p>! tip Note     Due to limitations in the Airtable API we have to process and update our records in batches. In this example we use groupings of 50. </p>"},{"location":"Airtable/script_fetchapi/#script","title":"Script","text":"<pre><code>console.log(`Hello, ${base.name}!`);\n\n/* \n\nAirtable template made for the CMIP-IPO\nAll queries: contact the IPO Technical Officer: \nDaniel Ellis\ndaniel.ellis -@- ext.esa.int\n\nBefore usage the \n    - tablename, \n    - currency, \n    - amount, \n    - output field \n    - and last_updated \ncolumns need to be present, and correctly referenced within this script\n\nUsage and ammendments to this script are permitted, but correct reference of the origin (this) and any changes are required. \n\n*/\n\n\n////////////////////////////////////////////////////\n// Configuration options to change!\n////////////////////////////////////////////////////\nconst tablename = 'Per Diem';\nconst output_currency = 'EUR'\n// fileds\nconst currency = 'Currency';\nconst amount = 'Per Diem amount';\nconst output_field = 'Per Diem in Euros';\nconst last_updated = 'Last updated';\n////////////////////////////////////////////////////\nconst apiKey = '&lt;need to enter key here&gt;'\n\nlet table = base.getTable(tablename);\nlet conversions = {};\n\nasync function get_rate(currency){\n    /* A function to get the latest conversion rate */\n\n    const url = `https://api.apilayer.com/exchangerates_data/latest?base=${currency}`;\n\n\n    if (conversions.hasOwnProperty(currency)){\n        return conversions[currency]\n    }else{\n\n        // Fetch conversion rate from API - you could change this to any API you want\n        let apiResponse = await fetch(url,{\n            method: 'GET',\n            headers: {\n                'apikey': apiKey,\n            }});\n        let data = await apiResponse.json();\n        console.log(data)\n\n\n        console.log(data)\n        let conversionRate = data.rates[output_currency];\n\n        conversions[currency] = conversionRate || -1\n\n        return conversions[currency]\n    }\n\n}\n\n// retrieve the table\nlet result = await table.selectRecordsAsync({fields: [currency,amount]});\n\nlet inputConfig = input.config();\nconsole.log(inputConfig);\n\nconst now = new Date().toISOString().split('T')[0];\n\n\n\n// Create an array to hold update operations\nlet updateOperations = [];\n\n// Prepare updates for each record\nfor (let record of result.records) {\n    let currency_value = record.getCellValue(currency);\n    let amount_value = record.getCellValue(amount);\n\n    let conversion_value = await get_rate(currency_value);\n\n\n    let updates = {\n        id: record.id,\n        fields: {\n            [output_field]: amount_value * conversion_value,\n            [last_updated]: `Conversion (${currency_value}): ${conversion_value} @ ${now}`\n        }\n    };\n\n    updateOperations.push(updates);\n}\n\n// Update records in batches\nconst batchSize = 50; // Set the batch size according to your needs\nfor (let i = 0; i &lt; updateOperations.length; i += batchSize) {\n    let batch = updateOperations.slice(i, i + batchSize);\n    await table.updateRecordsAsync(batch);\n}\n</code></pre>"},{"location":"Airtable/script_gitissue/","title":"Creating a GitHub Issue","text":"<p>In relation to a form submit or new value entry, we might want to perfrom an error check to ensure that our date is conformant, or accurate. </p> <p>Although it is possible to set up an automation to email, we may want a more visible solution - especially when we are working with an open source community - where the issue relates not to one individual or group. </p> <p>One way to do this it to create a github issue.  The following script take form input and compiles it into a template, which can then be discussed, or ingested by a GitHub action. </p>"},{"location":"Airtable/script_gitissue/#script","title":"Script","text":"<pre><code>/* \n\nAirtable template made for the CMIP-IPO\nAll queries: contact the IPO Technical Officer: \nDaniel Ellis\ndaniel.ellis -@- ext.esa.int\n\nMake sure that each label is '- ' delimited\n\n*/\n//////////////////////////////\n// set info here\n//////////////////////////////\n\n\n// GitHub repository information\nconst owner = 'cmip-ipo-internal';\nconst repo = 'CVTool';\nconst githubToken = '******'; // Replace with your GitHub personal access token\nconst airtablename = 'cvtooltable'\n\nconst maintainors = {'Daniel Ellis':'wolfiex',};\n\n\n//////////////////////////////\n// gets the data from form\n//////////////////////////////\n\nlet template;\nconst inputCode = input.get(\"\")\n// const table = base.getTable(airtablename); \n\n// Regular expression patterns to extract key-value pairs\nconst keyValuePattern = /&lt;b&gt;(.*?)&lt;\\/b&gt;&lt;br\\/&gt;(.*?)&lt;br\\/&gt;&lt;br\\/&gt;&lt;br\\/&gt;/g;\nconst keyPattern = /&lt;b&gt;(.*?)&lt;\\/b&gt;&lt;br\\/&gt;/;\nconst valuePattern = /&lt;br\\/&gt;(.*?)&lt;br\\/&gt;&lt;br\\/&gt;&lt;br\\/&gt;/;\n\n// Initialize an object to store key-value pairs\nconst result = {};\n\n// Extract key-value pairs using regular expressions\nlet match;\nwhile ((match = keyValuePattern.exec(inputCode)) !== null) {\n  const keyMatch = keyPattern.exec(match[0]);\n  const valueMatch = valuePattern.exec(match[0]);\n\n  if (keyMatch &amp;&amp; valueMatch) {\n    const key = keyMatch[1];\n    const value = valueMatch[1];\n    result[key] = value.replace(/&lt;[^&gt;]*&gt;/g, '');\n  }\n}\n\n\n\n//////////////////////////////\n// Log the resulting JSON object\n\n\nresult['Assign'] = result['Assign'].split('- ')\nresult['Label'] = result['Label'].split('- ').filter(d=&gt;d)\n\nresult['Assign'] = result['Assign'].map(d=&gt;maintainors[d]).filter(d=&gt;d)\n\n\n//////////////////////////////\n\ntemplate = `\n---\n# \ud83d\ude80 ${result['Title']} \ud83d\ude80\n---\n\n**Issuer**: ${'@'+ (result['Github'] || result['Email'].split('@')[0])}\n\n**Related Issues**:\n${JSON.stringify(result['Related'])||''}\n\n**Description**:\n${result['Description']}\n\n**Steps to Reproduce** (if applicable):\n${JSON.stringify(result['Reproduce'])||''}\n\n**Expected Behavior**:\n${JSON.stringify(result['Expected'])||'none'}\n\n---\n\n`\n\n\n//////////////////////////////\n// Submit github\n//////////////////////////////\n\n// Create a new GitHub issue\n  const url = `https://api.github.com/repos/${owner}/${repo}/issues`;\n\n  const requestBody = {\n    title: result['Title'],\n    body: template,\n  };\n\n  if (result['Label'])  requestBody['labels'] = result['Label']\n  if (result['Assign']) requestBody['Assign'] = result['Assign']\n\n\n  console.log(result)\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': `token ${githubToken}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(requestBody),\n    });\n    if (response.status === 401) {\n      console.log('no write on the token');\n    }\n    if (response.status === 201) {\n      console.log('GitHub issue created successfully.');\n    } else {\n      console.error('Failed to create GitHub issue.',response);\n    }\n  } catch (error) {\n    console.error('Error creating GitHub issue:', error);\n  }\n</code></pre>"},{"location":"Airtable/script_replacetable/","title":"Replace a table using values from GitHub","text":"<p>Warn</p> <p>Replacing values will break any relational references to the table, even if those recods have the same values and primary key</p> <p>Occasionally we might want a self updating refernce table we can use. This is often not the best approach to do this, but having a copy of data in one location may be useful for some users. </p>"},{"location":"Airtable/script_replacetable/#script","title":"Script","text":"<pre><code>/* \n\nAirtable template made for the CMIP-IPO\nAll queries: contact the IPO Technical Officer: \nDaniel Ellis\ndaniel.ellis -@- ext.esa.int\n\nWe replace a (institutes) table using the data from a github repository\n\n*/\n// GitHub repository information\nconst owner = 'cmip-ipo-internal';\nconst repo = 'MIPInstitutions';\nconst path = 'institutions.json'\n// const githubToken = '******'; // Replace with your GitHub personal access token\nconst table_name = 'Institutes(automated)'\n\n\n// Create a new GitHub issue\n\nfunction getFileContents(owner, repo, path) {\n    const apiUrl = `https://raw.githubusercontent.com/${owner}/${repo}/main/${path}`;;\n\n    return fetch(apiUrl,{\n      method: 'GET',\n      headers: {\n        'Authorization': `token ${githubToken}`,\n        'Content-Type': 'application/json',\n      }})\n        .then(response =&gt; {\n            if (!response.ok) {\n                throw new Error('Network response was not ok: ' + response.statusText);\n            }\n            return response.json();\n        })\n        .catch(error =&gt; {\n            console.error('Error:', error);\n            throw error;\n        });\n}\n\nasync function replaceTable(data){\n    let table = base.getTable(table_name);\n\n    // Step 1: Delete all existing records\n    let existingRecords = await table.selectRecordsAsync();\n    console.log(existingRecords)\n    await table.deleteRecordsAsync(existingRecords['recordIds']);\n\n\n\n    // Step 2: Parse data \n    let newRecordsData = [\n        // Add new records here\n        // {fields:{'col':val}}\n    ];\n\n    for (const [key, value] of Object.entries(data)) {\n        if (value['indentifiers']!= undefined ) {\n            let dummy = {\n                'fields': {\n                    'Name': key,\n                    'LongName': value['indentifiers']['institution_name'],\n                    'ROR': value['indentifiers']['ror']\n                }\n            };\n            newRecordsData.push(dummy);\n        }\n    }\n\n    console.log(newRecordsData)\n    // Step 3: Insert new records\n    await table.createRecordsAsync(newRecordsData);\n\n    console.log(\"All records deleted and new records inserted.\");\n\n    }\n\nawait getFileContents(owner,repo,path).then(async (data)=&gt;{if (data) await replaceTable(data)}).catch(err=&gt;console.error(err))\n</code></pre>"},{"location":"Installations/new%20conda%20mipcvs/","title":"Creating a new Mamba Environment","text":""},{"location":"Installations/new%20conda%20mipcvs/#installation","title":"Installation.","text":"<p>Information on how to install Mamba can be be found here . </p> <p>Please ensure that you have the latest <code>curl</code> and <code>tar</code> versions installed and then download the relevant files:</p> <pre><code># Linux Intel (x86_64):\ncurl -Ls https://micro.mamba.pm/api/micromamba/linux-64/latest | tar -xvj bin/micromamba\n# Linux ARM64:\ncurl -Ls https://micro.mamba.pm/api/micromamba/linux-aarch64/latest | tar -xvj bin/micromamba\n# Linux Power:\ncurl -Ls https://micro.mamba.pm/api/micromamba/linux-ppc64le/latest | tar -xvj bin/micromamba\n# macOS Intel (x86_64):\ncurl -Ls https://micro.mamba.pm/api/micromamba/osx-64/latest | tar -xvj bin/micromamba\n# macOS Silicon/M1 (ARM64):\ncurl -Ls https://micro.mamba.pm/api/micromamba/osx-arm64/latest | tar -xvj bin/micromamba```\n</code></pre>"},{"location":"Installations/new%20conda%20mipcvs/#setting-aliases-and-activating","title":"Setting aliases and activating","text":"<p>Start by activating your micromamba installation <pre><code>./micromamba shell init\n</code></pre> This adds it to our .rc file and allows us to choose a custom mamba environment </p> <pre><code>./bin/micromamba shell init -s bash -p ~/micromamba\nor\n./micromamba shell init -s zsh -p ~/micromamba\n</code></pre> <p>Don't forget to <code>source</code> the respective rc file. </p>"},{"location":"Installations/new%20conda%20mipcvs/#creating-a-new-environment","title":"Creating a new environment","text":"<pre><code># create a new env\nmamba create --name &lt;envname&gt;\n\n#initiate mamba\nmamba init\n\n# activate our environment\nmamba activate &lt;envname&gt;\n</code></pre> <p>ca mipcvs</p>"},{"location":"Installations/new%20conda%20mipcvs/#pip-install-fastapi-sso","title":"pip install fastapi-sso","text":"<p>mamba insall uvicorn fastapi itsdangrous requests</p> <p>pip install fastapi-login</p>"},{"location":"MIPCV_Site/jinja2/","title":"Jinja2 Quickstart","text":"<p>Jinja2 is a templating engine used to dynamically generate scripted content. This has its application in the creation of the MIPCV website generation. </p>"},{"location":"MIPCV_Site/jinja2/#example","title":"Example","text":"<p>Some example uses of the things possible with JINJA are shown below. </p>"},{"location":"MIPCV_Site/jinja2/#inline-html","title":"Inline HTML","text":"<p>Escape HTML code in literals with <code>|safe</code>, e.g., <code>{{ item.description |safe }}</code>.</p>"},{"location":"MIPCV_Site/jinja2/#batches","title":"Batches","text":"<p>Process items in batches using the <code>batch</code> filter.</p> <pre><code>{% for group in changes|batch(2) %}\n    &lt;!-- Make a row --&gt;\n    {% for item in group %}\n        &lt;!-- Process every two items --&gt;\n    {% endfor %}\n{% endfor %}\n</code></pre>"},{"location":"MIPCV_Site/jinja2/#dictionary","title":"Dictionary","text":"<p>Iterate through dictionary items.</p> <pre><code>{% for key, value in my_dict.items() %}\n  Key: {{ key }}&lt;br&gt;\n  Value: {{ value }}&lt;br&gt;&lt;br&gt;\n{% endfor %}\n</code></pre>"},{"location":"MIPCV_Site/jinja2/#conditional-statements","title":"Conditional Statements","text":"<p>Use <code>if</code> statements for conditional rendering.</p> <pre><code>{% if condition %}\n    &lt;!-- Content to display if condition is true --&gt;\n{% else %}\n    &lt;!-- Content to display if condition is false --&gt;\n{% endif %}\n</code></pre>"},{"location":"MIPCV_Site/jinja2/#macros","title":"Macros","text":"<p>Define reusable code snippets with macros.</p> <pre><code>{% macro my_macro(arg) %}\n    &lt;!-- Reusable code here using {{ arg }} --&gt;\n{% endmacro %}\n</code></pre>"},{"location":"MIPCV_Site/jinja2/#filters","title":"Filters","text":"<p>Apply filters for formatting and transformations.</p> <pre><code>{{ variable|filter_name }}\n</code></pre>"},{"location":"MIPCV_Site/jinja2/#loops","title":"Loops","text":"<p>Use <code>for</code> loops for iteration.</p> <pre><code>{% for item in items %}\n    &lt;!-- Process each item --&gt;\n{% endfor %}\n</code></pre>"},{"location":"MKDocs/markdown/","title":"Markdown Quick-Start","text":"<p>Markdown is a lightweight markup language creating easy-to-read documentation. Here is a quickstart guide to get you started. </p>"},{"location":"MKDocs/markdown/#advanced-tools","title":"Advanced tools","text":"<p>Advanced entries can be found at:  https://squidfunk.github.io/mkdocs-material/reference/admonitions/</p>"},{"location":"MKDocs/markdown/#general-entries","title":"General Entries","text":""},{"location":"MKDocs/markdown/#headers","title":"Headers","text":"<p>Headers are create sections in your document.</p> <pre><code># Heading 1\n## Heading 2\n### Heading 3\n</code></pre>"},{"location":"MKDocs/markdown/#lists","title":"Lists","text":"<p>Create ordered and unordered lists to organize content.</p> <pre><code>- Bullet 1\n- Bullet 2\n\n1. Numbered item 1\n2. Numbered item 2\n</code></pre> <ul> <li>Bullet 1</li> <li> <p>Bullet 2</p> </li> <li> <p>Numbered item 1</p> </li> <li>Numbered item 2</li> </ul>"},{"location":"MKDocs/markdown/#links","title":"Links","text":"<p>Hyperlink text to external URLs or pages</p> <p><pre><code>[Visit MkDocs](https://www.mkdocs.org/)\n</code></pre> Visit MkDocs</p>"},{"location":"MKDocs/markdown/#images","title":"Images","text":"<p>Insert images into your documentation.</p> <pre><code>![Alt text](image.jpg)\n</code></pre>"},{"location":"MKDocs/markdown/#emphasis","title":"Emphasis","text":"<p>Emphasize text using bold or italics.</p> <p><pre><code>**Bold text**\n*Italic text*\n</code></pre> Bold text Italic text</p>"},{"location":"MKDocs/markdown/#code-blocks","title":"Code Blocks","text":"<p>Display code snippets in a formatted block.</p> <p><pre><code>```python\ndef example():\n    print(\"Hello, MkDocs!\")\n</code></pre> <pre><code>```python\ndef example():\n    print(\"Hello, MkDocs!\")\n</code></pre></p>"},{"location":"MKDocs/markdown/#quotes","title":"Quotes","text":"<p>Quote text for better readability.</p> <pre><code>&gt; This is a quote.\n</code></pre> <p>This is a quote.</p>"},{"location":"MKDocs/markdown/#horizontal-rule","title":"Horizontal Rule","text":"<p>Separate sections with a horizontal line.</p>"},{"location":"MKDocs/markdown/#-","title":"<pre><code>---\n</code></pre>","text":""},{"location":"MKDocs/markdown/#tables","title":"Tables","text":"<p>Create tables to organize data.</p> <p><pre><code>| Header 1 | Header 2 |\n| -------- | -------- |\n| Content 1| Content 2|\n</code></pre> | Header 1 | Header 2 | | -------- | -------- | | Content 1| Content 2|</p>"},{"location":"MKDocs/markdown/#footnotes","title":"Footnotes","text":"<p>Add footnotes for additional information.</p> <p><pre><code>Here is some text[^1].\n\n[^1]: This is a footnote.\n</code></pre> Here is some text[^1].</p> <p>[^1]: This is a footnote.</p>"},{"location":"MKDocs/setup/","title":"Setup and Compilation","text":""},{"location":"MKDocs/setup/#mamba","title":"Mamba","text":""},{"location":"MKDocs/setup/#install","title":"Install","text":"<p>To install mkdocs, we can use mamba to create a enw environment.  <pre><code>mamba create --name docs\n\nmamba activate docs\n\nmamba init\n\nmamba install mkdocs mkdocs-material pymdown-extensions\n</code></pre></p>"},{"location":"MKDocs/setup/#build","title":"Build","text":"<pre><code>mkdocs build --clean\n</code></pre>"},{"location":"MKDocs/setup/#docker","title":"Docker","text":""},{"location":"MKDocs/setup/#install_1","title":"Install","text":"<p><code>docker pull squidfunk/mkdocs-material</code></p>"},{"location":"MKDocs/setup/#creating-a-site-dont-run","title":"Creating a site. (Dont run)","text":"<p><code>docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material new .</code></p>"},{"location":"MKDocs/setup/#preview","title":"Preview","text":"<p><code>docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material</code></p>"},{"location":"MKDocs/setup/#build_1","title":"Build","text":"<p><code>docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material build</code></p>"},{"location":"MKDocs/setup/#resources","title":"Resources","text":""},{"location":"MKDocs/setup/#demo-files-and-structure","title":"Demo files and structure:","text":"<p>https://github.com/selfhostedshow/wiki/tree/master</p>"},{"location":"MKDocs/setup/#permissable-items","title":"Permissable items","text":"<p>https://squidfunk.github.io/mkdocs-material/reference/admonitions/</p>"},{"location":"MKDocs/setup/#developer-notes","title":"Developer notes","text":"<p>The following are Notes and will be tidied away in due course. </p> <p>https://squidfunk.github.io/mkdocs-material/getting-started/</p>"},{"location":"Server_Config/FASTAPI/","title":"FastAPI (Gunicorn)","text":"<p>--bind 0.0.0.0:8000 essentially tells Gunicorn to listen on all available network interfaces on port 8000. This is a common configuration when you want your Gunicorn server to be accessible from external sources, such as when deploying a web application.</p> <p>For example, if you deploy a Flask, Django or FastAPI application with Gunicorn using this bind option, your application will be accessible over HTTP at http://your_server_ip:8000.</p>"},{"location":"Server_Config/FASTAPI/#gunicorn-yaml-config","title":"Gunicorn YAML Config","text":"<pre><code>workers = 3              # number of workers Gunicorn will spawn \n\nbind = '127.0.0.1:8000'  # this is where you declare on which address your \n\n\n# gunicorn app is running.\n                         # Basically where Nginx will forward the request to\n\npidfile = '/var/run/gunicorn/mysite.pid' # create a simple pid file for gunicorn. \n\nuser = 'user'          # the user gunicorn will run on\n\ndaemon = True          # this is only to tell gunicorn to deamonize the server process\n\nerrorlog = '/var/log/gunicorn/error-mysite.log'    # error log\n\naccesslog = '/var/log/gunicorn/access-mysite.log'  # access log\n\nproc_name = 'gunicorn-mysite'            # the gunicorn process name\n</code></pre>"},{"location":"Server_Config/nginx/","title":"Nginx","text":"<p>Nginx is a powerful and widely-used open-source web server, reverse proxy server, and load balancer. Known for its efficiency and low resource usage, Nginx excels in handling concurrent connections and serving static content, making it a popular choice for high-traffic websites.</p>"},{"location":"Server_Config/nginx/#installation","title":"Installation","text":"<pre><code>sudo apt update\nsudo apt install nginx\n</code></pre>"},{"location":"Server_Config/nginx/#basic-application","title":"Basic Application","text":"<ol> <li>Start Nginx:</li> </ol> <pre><code>sudo systemctl start nginx\n</code></pre> <ol> <li>Enable Nginx to start on boot:</li> </ol> <pre><code>sudo systemctl enable nginx\n</code></pre>"},{"location":"Server_Config/nginx/#configuration","title":"Configuration","text":"<p>Nginx's main configuration file is typically located at <code>/etc/nginx/nginx.conf</code>. Additional configurations for specific sites or applications are placed in the <code>/etc/nginx/sites-available/</code> directory.</p>"},{"location":"Server_Config/nginx/#user-permission","title":"User permission","text":"<p>Our config file starts by defining which users and groups can access the data. </p> <p><pre><code>user username groupname;\n</code></pre> To change file permissions to work with Nginx, please refer to the Permissions page (link here).</p>"},{"location":"Server_Config/nginx/#server-block-virtual-host","title":"Server Block (Virtual Host)","text":"<p>To configure a server block for a specific domain or application, create a new configuration file within the <code>sites-available</code> directory and create a symbolic link to <code>sites-enabled</code>:</p> <pre><code>sudo nano /etc/nginx/sites-available/example.com\n</code></pre> <p>Example configuration:</p> <pre><code>server {\n    listen 80;\n    server_name example.com www.example.com;\n\n    location / {\n        root /var/www/html;\n        index index.html;\n    }\n}\n</code></pre> <p>Create a symbolic link:</p> <pre><code>sudo ln -s /etc/nginx/sites-available/example.com /etc/nginx/sites-enabled/\n</code></pre> <p>Restart Nginx to apply changes:</p> <pre><code>sudo systemctl restart nginx\n</code></pre> <p>This basic example serves files from <code>/var/www/html</code> for the specified domain.</p>"},{"location":"Server_Config/nginx/#more-advanced-configurations","title":"More advanced configurations","text":"<p>Nginx documentation.</p> <p>! tip Remember to test your configuration before restarting Nginx</p> <pre><code>`sudo nginx -t`\n</code></pre>"},{"location":"Server_Config/nginx/#testing-the-configuration","title":"Testing the configuration.","text":"<p>To test the configuration you can try using curl on localhost: <code>curl -f localhost:&lt;port&gt;</code>. w working configuraiton will provide you with:  <pre><code>&lt;!DOCTYPE html&gt;\n...\n&lt;body&gt;\n&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;\n&lt;p&gt;If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.&lt;/p&gt;\n\n&lt;p&gt;For online documentation and support please refer to\n&lt;a href=\"http://nginx.org/\"&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;\nCommercial support is available at\n&lt;a href=\"http://nginx.com/\"&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p>"},{"location":"Server_Config/nginx/#restricting-files-using-nginx","title":"Restricting files using Nginx.","text":"<p>Lets restrict files in two locations: (<code>/admin</code>, <code>/private</code>). </p> <ol> <li>Create Password Files:    Use the <code>htpasswd</code> tool to create password files for each location:</li> </ol> <p><pre><code>sudo htpasswd -c /etc/nginx/.htpasswd_admin admin_user\n\nsudo htpasswd -c /etc/nginx/.htpasswd_private private_user\n</code></pre>    ! warn \"You will be prompted to enter and confirm passwords for each user.\"</p> <ol> <li>Configure Nginx:    Update your Nginx configuration:</li> </ol> <pre><code>server {\n    listen 80;\n    server_name example.com;\n\n    location /admin {\n        auth_basic \"Admin Area\";\n        auth_basic_user_file /etc/nginx/.htpasswd_admin;\n\n        # Your configuration for the admin area goes here\n    }\n\n    location /private {\n        auth_basic \"Private Area\";\n        auth_basic_user_file /etc/nginx/.htpasswd_private;\n\n        # Your configuration for the private area goes here\n    }\n     ...\n}\n</code></pre> <ol> <li>Test and Reload Nginx:    Test the Nginx configuration and reload:</li> </ol> <pre><code>sudo nginx -t\nsudo systemctl reload nginx\n</code></pre>"},{"location":"Server_Config/permissions/","title":"Managing Directory Permissions","text":""},{"location":"Server_Config/permissions/#introduction","title":"Introduction","text":"<p>In Linux, ensuring proper access control is vital for maintaining a secure and organized system.  </p>"},{"location":"Server_Config/permissions/#steps-to-assign-permissions-users-and-groups","title":"Steps to Assign Permissions, Users and Groups","text":""},{"location":"Server_Config/permissions/#1-identify-the-directories","title":"1. Identify the Directories","text":"<p>Begin by identifying the directories for which you want to modify permissions. </p>"},{"location":"Server_Config/permissions/#2-select-permissions-you-wish-to-assign","title":"2. Select permissions you wish to assign","text":"<p>Here is a table of numerical permissions in Linux:</p> Permission Numeric Value Representation --- 0 No permission --x 1 Execute -w- 2 Write -wx 3 Write + Execute r-- 4 Read r-x 5 Read + Execute rw- 6 Read + Write rwx 7 Read + Write + Execute <p>These numerical values are used with the <code>chmod</code> command to set permissions for the owner, group, and others. (defined below)</p>"},{"location":"Server_Config/permissions/#how-to-read","title":"How to read:","text":"<p>The permissions are combined to define the application we are interested in. </p> <ul> <li>Owner: Read (4) + Write (2) + Execute (1) = 7</li> <li>Group: Read (4) + Write (2) = 6</li> <li>Others: Read (4) = 4</li> </ul>"},{"location":"Server_Config/permissions/#2-use-chmod-to-modify-permissions","title":"2. Use <code>chmod</code> to Modify Permissions","text":"<p>The <code>chmod</code> command is used to change file and directory permissions. The basic syntax is:</p> <pre><code>chmod [options] permissions file/directory\n</code></pre> <ul> <li>Options: Common options include <code>-R</code> (recursively apply permissions) and numerical permissions (e.g., <code>chmod 755</code>).</li> <li>Permissions: Use a three-digit octal number to represent the permissions as defined previously. </li> </ul> <p><code>chmod 754 file</code> grants read, write, and execute permissions to the owner, read and write permissions to the group, and read-only permission to others.</p>"},{"location":"Server_Config/permissions/#3-use-chown-to-change-ownership","title":"3. Use <code>chown</code> to Change Ownership","text":"<p>If needed, you can change the ownership of a directory using the <code>chown</code> command. The basic syntax is:</p> <pre><code>chown [options] user:group file/directory\n</code></pre> <ul> <li>Options: Common options include <code>-R</code> (recursively change ownership).</li> <li>User and Group: Specify the new owner and group for the directory.</li> </ul> <p>Example:</p> <pre><code>chown -R john:users directory_name\n</code></pre> <p>This command changes the ownership of the directory and its contents to the user 'john' and the group 'users.'</p>"},{"location":"Server_Config/permissions/#4-creating-a-group","title":"4. Creating a group","text":"<p>If a group dows not exist we can add it with  <pre><code>sudo addgroup group_name\n</code></pre></p> <p>You can then use:  <pre><code>getent group group_name\n</code></pre> to check that the group exists. </p>"},{"location":"Server_Config/permissions/#4-use-usermod-to-add-users-to-groups","title":"4. Use <code>usermod</code> to Add Users to Groups","text":"<p>The <code>usermod</code> command is used to modify user account properties, including adding users to groups. The basic syntax is:</p> <pre><code>sudo usermod -aG group_name username\n</code></pre> <ul> <li>-aG: Appends the user to the supplementary group(s) specified.</li> <li>group_name: The name of the group to which the user will be added.</li> <li>username: The name of the user to be added to the group.</li> </ul> <p>Example:</p> <pre><code>sudo usermod -aG developers alice\n</code></pre> <p>This command adds the user 'alice' to the 'developers' group.</p>"},{"location":"Server_Config/ports/","title":"Configuring the Ports (UFW)","text":"<p>There are two parts to configuring the ports used by your virutal machine.:</p> <ul> <li> <p>The first involves configuring the firewall and opening access to the ports. </p> </li> <li> <p>[optional] The second requires you to allow access to the afforementioned ports on your cloud service provider. </p> </li> </ul>"},{"location":"Server_Config/ports/#installing-the-firewall","title":"Installing the Firewall","text":""},{"location":"Server_Config/ports/#what-is-ufw","title":"What is UFW","text":"<p>Uncomplicated Firewall (UFW) is a user-friendly interface for managing iptables on Linux systems. It simplifies the configuration of firewall rules, making it accessible even for users with limited networking knowledge.</p>"},{"location":"Server_Config/ports/#installation-instructions","title":"Installation instructions","text":"<pre><code>sudo apt update\nsudo apt upgrade\nsudo apt install ufw\n</code></pre>"},{"location":"Server_Config/ports/#system-commands-to-check-enable-and-add-ports-to-the-firewall","title":"System Commands to check, enable and add ports to the firewall.","text":""},{"location":"Server_Config/ports/#checking-the-service-status","title":"Checking the service status","text":"<p>Check the service status with standard systemctl command:</p> <p><code>sudo systemctl status ufw</code></p> <p>If UFW is not working, we can enable it with:</p> <p><code>sudo ufw enable</code></p>"},{"location":"Server_Config/ports/#individual-port-commands","title":"Individual port commands","text":""},{"location":"Server_Config/ports/#checking-the-port-status","title":"Checking the port status","text":"<p>If we want to see what the existing rules are we can run:</p> <p><code>sudo ufw status verbose</code></p>"},{"location":"Server_Config/ports/#allowing-a-new-port","title":"Allowing a new port.","text":"<p>Syntax to open specific TCP port:</p> <pre><code>sudo ufw allow &lt;port&gt;\nsudo ufw reload\n</code></pre> <p>Example:</p> <pre><code>sudo ufw allow 53/tcp\n\n# Syntax supports also names which refer to specific ports:\nsudo ufw allow https\n\n# To allow incoming tcp and udp packets on port 21, enter:\nsudo ufw allow 21\n\n# Example for specific IP Address:\nsudo ufw allow from 190.34.21.113 to any port\n</code></pre>"},{"location":"Server_Config/ports/#checking-the-configuration-of-the-firewall-ports","title":"Checking the configuration of the firewall ports.","text":"<p>Let\u2019s check the configuration:</p> <p><code>sudo ufw status verbose</code> Command displays a provisional table with three columns:</p>"},{"location":"Server_Config/ports/#explanation","title":"Explanation:","text":"<ul> <li> <p><code>To</code> Describes the particular protocol</p> </li> <li> <p><code>Action</code> Tells us whether it is allowed or denied</p> </li> <li> <p><code>From</code> It says about the source e.g anywhere or one ip address like presented above</p> </li> </ul>"},{"location":"Server_Config/ports/#selecting-a-port","title":"Selecting a port.","text":"<p>We need to select the correct ports for the purpose and only open those which we require. Our choices should ensure that prevent any potential security vulnerabilitues by strategically assigning and managing ports witih a network, </p> Port Protocol Main Description 80 HTTP Yes Default port for unsecured web traffic. Widely supported and commonly used. 443 HTTPS Yes Default port for secure web traffic using SSL/TLS. Encrypted communication for sensitive data. 8080 HTTP Yes Common alternative for HTTP. Often used for testing and development. 8443 HTTPS Yes Common alternative for HTTPS. Often used for testing and development with SSL/TLS. 8000 HTTP Yes Another alternative for HTTP. Can be used for various applications and testing. 3000 HTTP Yes Commonly used in development environments for web applications. 5000 HTTP Yes Often used for web applications, including some frameworks like Flask. 8888 HTTP Yes Commonly used in development environments, especially with Jupyter Notebooks. 8081 HTTP No Often used as an alternative HTTP port, especially in development environments. 8880 HTTP No Another alternative for HTTP, sometimes used in testing and development. 9000 HTTP No Commonly used in development environments, especially with PHP applications. 8088 HTTP No Used in some applications and development scenarios as an alternative HTTP port. 8090 HTTP No Frequently used as an alternative HTTP port for various applications. 8181 HTTP No Occasionally used for HTTP, especially in testing and development. 8889 HTTP No Another alternative for HTTP, sometimes chosen for specific applications. 9090 HTTP No Used in some applications and development environments as an alternative HTTP port."},{"location":"Server_Config/ssh/","title":"SSH login and RSA keys","text":"<p>Info</p> <p>We need to ensure that port 22 is allowed in the security groups before we can connect to the machine through ssh. </p> <p>Similarly we also need to assign it a Floating IP such that the machine is globally accessible. </p>"},{"location":"Server_Config/ssh/#creating-a-new-ssh-keygen","title":"Creating a new ssh keygen","text":"<p>We can create a new RSA pair using the following command. </p> <pre><code>ssh-keygen -t rsa -C \"yourname@work_email.ext\"\n</code></pre>"},{"location":"Server_Config/ssh/#additional-considerations","title":"Additional considerations","text":""},{"location":"Server_Config/ssh/#adding-a-key-to-a-local-agent","title":"Adding a key to a local agent","text":"<p>We can add the key to our local agent to use keyless login. This is done through  <pre><code>ssh-add /Absolute/Path/to/.ssh/keyname\n</code></pre></p>"},{"location":"Server_Config/ssh/#ensure-the-key-has-the-correct-permissions","title":"Ensure the key has the correct permissions","text":"<pre><code>PRIVATE_KEY_PATH=\"&lt;/Absolute/Path/to/.ssh/keyname&gt;\"\nchmod 700 ~/.ssh\nchmod 600 $PRIVATE_KEY_PATH\n</code></pre>"},{"location":"Server_Config/ssh/#remote-machine","title":"Remote Machine","text":""},{"location":"Server_Config/ssh/#logging-in","title":"Logging in:","text":"<p>This requires the use of a key already in the machines 'approved hosts'. <pre><code>REMOTE_HOST=\"&lt;user&gt;@&lt;ip.address&gt;\"\nPRIVATE_KEY_PATH=\"&lt;/Absolute/Path/to/.ssh/keyname&gt;\"\n\nssh $REMOTE_HOST -i $PRIVATE_KEY_PATH -v\n</code></pre></p>"},{"location":"Server_Config/ssh/#copy-the-public-key-to-the-remote-host","title":"Copy the public key to the remote host","text":"<p>To add a new key to a machine through which we already have access to, we can use: </p> <pre><code>PRIVATE_KEY_PATH=\"&lt;/Absolute/Path/to/.ssh/keyname&gt;\"\nREMOTE_HOST=\"&lt;user&gt;@&lt;ip.address&gt;\"\nREMOTE_PORT=22\n\nssh-copy-id -i \"$PRIVATE_KEY_PATH.pub\" -p $REMOTE_PORT $REMOTE_HOST\n</code></pre>"},{"location":"Server_Config/ssh/#alternative","title":"Alternative","text":"<p>It is also possible to fetch the host key and append it to the known_hosts file <pre><code>ssh-keyscan -t rsa -p $REMOTE_PORT $REMOTE_HOST &gt;&gt; ~/.ssh/known_hosts\n</code></pre></p>"},{"location":"Server_Config/CREODIAS/2FA%20management/","title":"2FA (CREODIAS)","text":""},{"location":"Server_Config/CREODIAS/2FA%20management/#location","title":"Location","text":"<p>We start by going to: https://identity.cloudferro.com/auth/realms/Creodias-new/account/#/security/signingin</p>"},{"location":"Server_Config/CREODIAS/2FA%20management/#install-the-cisco-duo-app-on-your-mobile-device","title":"Install the CISCO DUO app on your mobile device.","text":"<p>Download Duo Mobile for iOS Download Duo Mobile for Android</p> <p>More info can be found here</p>"},{"location":"Server_Config/CREODIAS/2FA%20management/#scan-the-qr-code-and-complete-form","title":"Scan the QR code, and complete form","text":"<p>Follow the instructions and you should then be able to select an alternative 2FA source when logging in.  </p>"},{"location":"Server_Config/CREODIAS/credoias_ports/","title":"Ports and Security groups (CREDOIAS)","text":"<p>1. Navigate to https://horizon.cloudferro.com/project/</p> <p>2. Click \"Network\"</p> <p></p> <p>3. Click \"Security Groups\"</p> <p></p> <p>4. Click \"Create Security Group\"</p> <p></p> <p>5. Enter the name.</p> <p></p> <p>6. Click \"Add Rule\"</p> <p></p> <p>7. Click the \"Description\" field.</p> <p></p> <p>8. Press [[cmd]] + [[v]]</p> <p>9. Click the \"Port\" field.</p> <p></p> <p>10. Save</p> <p>!!! warn \"Don't forget to add the security group to the instance! </p>"},{"location":"Server_Config/CREODIAS/floating_ip/","title":"Adding a floating IP on CREODIAS","text":"<p>To access our machine externally we first need to give it an address on how to do this. This page does just that. </p>"},{"location":"Server_Config/CREODIAS/floating_ip/#what-are-floating-ips","title":"What are floating IPs","text":"<p>Floating IPs in OpenStack are public IP addresses assigned to your Virtual Machines.These allow us to host services like SSH or HTTP(s) over the Internet.</p>"},{"location":"Server_Config/CREODIAS/floating_ip/#how-to-assign-a-floating-ip","title":"How to assign a Floating IP?","text":"<ol> <li>Open the instances tab in Horizon</li> <li>Use the dropdown menu and select the <code>Associate Floating IP</code> option. </li> <li>You may choose an address from the dropdown menu, but if it\u2019s empty, you need to allocate an address first. Click the + icon on the right.</li> <li>Allocate IP.</li> </ol> <p>The IP address should be associated with a local address from the 192.168.x.x subnet. If you have a 10.x.x.x address change it to an 192.168.x.x address.</p>"},{"location":"scripts/update_repos/","title":"CRON update github repositories.","text":"<p>We have a number of repositories on our VM that we would wish to keep up to date. </p> <p>To ensure this is the case we run a timed job (CRON) which checks and updates a list of repositories.</p> <p>The basic code required to accomplish this can be found: </p> <pre><code>#!/bin/bash\n\n# Define the list of repositories\nrepositories=(\n    \"$HOME/repo1-location\"\n    \"$HOME/repos/repo2-location\"\n    ...\n)\n\n# Specify the branch to check for updates\nbranch=\"main\"\n\n# Specify the log file with date\nlog_file=\"$HOME/.logs/repo_update_$(date +\\%Y\\%m\\%d).log\"\n\n# Specify the backup folder\nbackup_folder=\"$HOME/backup\"\n\n# Create the backup folder if it doesn't exist\nmkdir -p \"$backup_folder\"\n\n# Loop through each repository and update if changes are found\nfor repo in \"${repositories[@]}\"; do\n    echo \"------------------------------\"\n    echo \"Checking for updates in $repo\"\n\n    # Navigate to the repository\n    cd \"$repo\" || exit 1\n\n    # Fetch remote changes\n    git fetch origin \"$branch\"\n\n    # Check if there are any changes on the specified branch\n    if [[ $(git rev-list HEAD..origin/\"$branch\" --count) -gt 0 ]]; then\n        echo \"Updating $repo\"\n\n        # Create a backup with date timestamp\n        backup_file=\"$backup_folder/$(basename \"$repo\")_backup_$(date +\\%Y\\%m\\%d_\\%H\\%M\\%S).tar.gz\"\n        tar -czf \"$backup_file\" . &gt;&gt; \"$log_file\" 2&gt;&amp;1\n\n        # Pull changes and force overwrite conflicts\n        git pull origin \"$branch\" --force &gt;&gt; \"$log_file\" 2&gt;&amp;1\n\n        # Log the status of the update with the date\n        echo \"$(date): Update status for $repo: Success\" &gt;&gt; \"$log_file\"\n        echo \"$(date): Repository backed up to $backup_file\" &gt;&gt; \"$log_file\"\n    else\n        echo \"No updates found in $repo\"\n\n        # Log the status of the update with the date\n        echo \"$(date): Update status for $repo: No updates found\" &gt;&gt; \"$log_file\"\n    fi\n\n    # Return to the script's directory\n    cd - || exit 1\ndone\n</code></pre>"}]}